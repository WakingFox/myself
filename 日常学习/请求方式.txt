HttpClient3.1 是 org.apache.commons.httpclient下操作远程 url的工具包，虽然已不再更新，但实现工作中使用httpClient3.1的代码还是很多，
=================HTTPClient发送get请求=================
// 创建httpClient实例
HttpClient httpClient = new HttpClient();
// 设置http连接主机服务超时时间：15000毫秒
// 先获取连接管理器对象，再获取参数对象,再进行参数的赋值
httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(15000);
// 创建一个Get方法实例对象
GetMethod getMethod = new GetMethod(url);
// 设置get请求超时为60000毫秒
getMethod.getParams().setParameter(HttpMethodParams.SO_TIMEOUT, 60000);
// 设置请求重试机制，默认重试次数：3次，参数设置为true，重试机制可用，false相反
getMethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, new DefaultHttpMethodRetryHandler(3, true));
int statusCode = httpClient.executeMethod(getMethod);
// 判断返回码
if (statusCode != HttpStatus.SC_OK) {
	// 如果状态码返回的不是ok,说明失败了,打印错误信息
	System.err.println("Method faild: " + getMethod.getStatusLine());
} else {
	// 通过getMethod实例，获取远程的一个输入流
	InputStream is = getMethod.getResponseBodyAsStream();
	// 包装输入流
	BufferedReader  br = new BufferedReader(new InputStreamReader(is, "UTF-8"));

	StringBuffer sbf = new StringBuffer();
	// 读取封装的输入流
	String temp = null;
	while ((temp = br.readLine()) != null) {
		sbf.append(temp).append("\r\n");
	}

	String  result = sbf.toString();
}


==================HTTPClient发送post请求==================
InputStream is = null;
BufferedReader br = null;
String result = null;
// 创建httpClient实例对象
HttpClient httpClient = new HttpClient();
// 设置httpClient连接主机服务器超时时间：15000毫秒
httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(15000);
// 创建post请求方法实例对象
PostMethod postMethod = new PostMethod(url);
// 设置post请求超时时间
postMethod.getParams().setParameter(HttpMethodParams.SO_TIMEOUT, 60000);

NameValuePair[] nvp = null;
// 判断参数map集合paramMap是否为空
if (null != paramMap && paramMap.size() > 0) {// 不为空
	// 创建键值参数对象数组，大小为参数的个数
	nvp = new NameValuePair[paramMap.size()];
	// 循环遍历参数集合map
	Set<Entry<String, Object>> entrySet = paramMap.entrySet();
	// 获取迭代器
	Iterator<Entry<String, Object>> iterator = entrySet.iterator();

	int index = 0;
	while (iterator.hasNext()) {
		Entry<String, Object> mapEntry = iterator.next();
		// 从mapEntry中获取key和value创建键值对象存放到数组中
		try {
			nvp[index] = new NameValuePair(mapEntry.getKey(),
					new String(mapEntry.getValue().toString().getBytes("UTF-8"), "UTF-8"));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		index++;
	}
}
// 判断nvp数组是否为空
if (null != nvp && nvp.length > 0) {
	// 将参数存放到requestBody对象中
	postMethod.setRequestBody(nvp);
}
// 执行POST方法
try {
	int statusCode = httpClient.executeMethod(postMethod);
	// 判断是否成功
	if (statusCode != HttpStatus.SC_OK) {
		System.err.println("Method faild: " + postMethod.getStatusLine());
	}
	// 获取远程返回的数据
	is = postMethod.getResponseBodyAsStream();
	// 封装输入流
	br = new BufferedReader(new InputStreamReader(is, "UTF-8"));

	StringBuffer sbf = new StringBuffer();
	String temp = null;
	while ((temp = br.readLine()) != null) {
		sbf.append(temp).append("\r\n");
	}

	result = sbf.toString();




















HttpClient4.5是org.apache.http.client下操作远程 url的工具包
=================HttpClient发送get请求=================
org.apache.http.client.HttpClient client = new DefaultHttpClient();（废弃）
org.apache.http.client.HttpClient client = HttpClients.createDefault();（常用）
org.apache.http.client.methods.HttpGet httpGet = new HttpGet(urlParam);
org.apache.http.HttpResponse response = client.execute(httpGet);
BufferedReader br = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
String temp;
StringBuffer  resultBuffer = new StringBuffer();
while ((temp = br.readLine()) != null) {
	resultBuffer.append(temp);
}

=================使用HttpClient发送post请求=================

org.apache.http.client.HttpClient client = new DefaultHttpClient();（废弃）
org.apache.http.client.methods.HttpPost httpPost = new HttpGet(urlParam);
List<NameValuePair> list = new ArrayList<NameValuePair>();
list.add(new BasicNameValuePair("key值", "value值");
UrlEncodedFormEntity entity = new UrlEncodedFormEntity(list, "UTF-8");
httpPost.setEntity(entity);
HttpResponse response = client.execute(httpPost);
StringBuffer resultBuffer = new StringBuffer();
BufferedReader br = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
String temp;
while ((temp = br.readLine()) != null) {
	resultBuffer.append(temp);
}


HttpURLConnection是JAVA的标准类，是JAVA比较原生的一种实现方式。
=================使用HttpURLConnection发送post请求=================
URL url = new URL(urlParam);
HttpURLConnection con = (HttpURLConnection) url.openConnection();
// 设置连接请求方式
con.setRequestMethod("POST");
// 设置连接主机服务器超时时间：15000毫秒
con.setConnectTimeout(15000);
// 设置读取主机服务器返回数据超时时间：60000毫秒
con.setReadTimeout(60000);
con.setDoOutput(true);
con.setDoInput(true);
con.setUseCaches(false);
con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
// 设置鉴权信息：Authorization: Bearer da3efcbf-0845-4fe3-8aba-ee040be542c0
con.setRequestProperty("Authorization", "Bearer da3efcbf-0845-4fe3-8aba-ee040be542c0");
// 通过连接对象获取一个输出流
OutputStreamWriter osw = new OutputStreamWriter(con.getOutputStream(), charset);
osw.write("参数，格式为XX=XX&XX=XX");
osw.flush();
StringBuffer resultBuffer = new StringBuffer();
int contentLength = Integer.parseInt(con.getHeaderField("Content-Length"));
if (contentLength > 0) {
	BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), charset));
	String temp;
	while ((temp = br.readLine()) != null) {
		resultBuffer.append(temp);
	}
}


=================使用HttpURLConnection发送get请求=================
// 创建远程url连接对象
URL url = new URL(urlParam);
// 通过远程url连接对象打开一个连接，强转成httpURLConnection类
HttpURLConnection con = (HttpURLConnection) url.openConnection();
con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
// 设置连接方式：get
con.setRequestMethod("GET");
// 设置连接主机服务器的超时时间：15000毫秒
connection.setConnectTimeout(15000);
// 设置读取远程返回的数据时间：60000毫秒
connection.setReadTimeout(60000);
// 发送请求
connection.connect();
StringBuffer resultBuffer = new StringBuffer();
BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), charset));
String temp;
while ((temp = br.readLine()) != null) {
	resultBuffer.append(temp);
}





=================使用URLConnection发送post请求=================
URL realUrl = new URL(urlParam);
URLConnection con = realUrl.openConnection();
con.setRequestProperty("accept", "*/*");
con.setRequestProperty("connection", "Keep-Alive");
con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
con.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
// 发送POST请求必须设置如下两行
con.setDoOutput(true);
con.setDoInput(true);

=================使用URLConnection发送get请求=================
URL url = new URL(urlParam);
URLConnection con = url.openConnection();
con.setRequestProperty("accept", "*/*");
con.setRequestProperty("connection", "Keep-Alive");
con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
con.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
// 建立连接
con.connect();
StringBuffer resultBuffer = new StringBuffer();
BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), charset));
String temp;
while ((temp = br.readLine()) != null) {
	resultBuffer.append(temp);
}

URLConnection是抽象类，HttpURLConnection是对URlConnection的继承






=================socket发送post/get请求=================
URL url = new URL(urlParam);
String host = url.getHost();
int port = url.getPort();
Socket socket = new Socket(host, port);
StringBuffer sb = new StringBuffer();
sb.append("POST " + path + " HTTP/1.1\r\n");//sb.append("GET " + path + " HTTP/1.1\r\n")；
sb.append("Host: " + host + "\r\n");
sb.append("Connection: Keep-Alive\r\n");
sb.append("Content-Type: application/x-www-form-urlencoded; charset=utf-8 \r\n");
sb.append("Content-Length: ").append(sb.toString().getBytes().length).append("\r\n");
// 这里一个回车换行，表示消息头写完，不然服务器会继续等待
sb.append("\r\n");
if (sbParams != null && sbParams.length() > 0) {
	sb.append(sbParams.substring(0, sbParams.length() - 1));
}
osw = new OutputStreamWriter(socket.getOutputStream());
osw.write(sb.toString());
osw.flush();
is = socket.getInputStream();

















